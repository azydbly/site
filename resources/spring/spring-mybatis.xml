<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/mvc  
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task.xsd
	http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd">
	
	<!--在主容器中（applicationContext.xml,将Controller的注解排除掉-->
	<context:component-scan base-package="com"> 
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" /> 
	</context:component-scan> 
	
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"  destroy-method="close">
		<property name="driverClass"><value>${driverClass}</value></property> 
		<property name="jdbcUrl"><value>${jdbcUrl}</value></property> 
		<property name="user"><value>${user}</value></property> 
		<property name="password"><value>${password}</value></property> 
		<property name="minPoolSize"><value>${minPoolSize}</value></property>
		<property name="maxPoolSize"><value>${maxPoolSize}</value></property> 
		<property name="initialPoolSize"><value>${initialPoolSize}</value></property> 
		<property name="maxIdleTime"><value>${maxIdleTime}</value></property> 
		<property name="acquireIncrement"><value>${acquireIncrement}</value></property> 
		<property name="acquireRetryAttempts"><value>${acquireRetryAttempts}</value></property> 
		<property name="acquireRetryDelay"><value>${acquireRetryDelay}</value></property> 
		<property name="testConnectionOnCheckin"><value>${testConnectionOnCheckin}</value></property>
		<property name="automaticTestTable"><value>${automaticTestTable}</value></property> 
		<property name="idleConnectionTestPeriod"><value>${idleConnectionTestPeriod}</value></property>
		<property name="checkoutTimeout"><value>${checkoutTimeout}</value></property>      	 	  	
	</bean>  
      
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">    
		<constructor-arg index="0" ref="sqlSessionFactory" />    
	</bean>
	
	<!-- cache注解，强制代理目标类 -->
	<bean id="myKeyGenerator" class="com.system.util.MyKeyGenerator"/><!-- 自定义cacheKey生成器(方法名加参数方式) -->
	<cache:annotation-driven proxy-target-class="true" key-generator="myKeyGenerator"/>
	<context:component-scan base-package="com.service" />
	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:/spring/ehcache.xml" />
	</bean>

	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehcache" />
	</bean>

	<!-- spring和MyBatis整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/mapper/xml/*.xml"></property>
		<property name="configLocation" value="classpath:spring/mybatis-config.xml" />
	</bean>
	
	<!-- 创建一个sqlSession实例，线程安全的，可以在所有DAO实例共享，原理是将sqlSession，事务与当前线程挂钩 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	<!-- 配置事务管理器，注意这里的dataSource和SqlSessionFactoryBean的dataSource要一致，不然事务就没有作用了 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="weshareTxAdvice" transaction-manager="transactionManager">  
		<tx:attributes>  
			<!-- 所有以insert开头的方法，事务的传播特性为REQUIRED -->
			<tx:method name="ins*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="upd*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>  
	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution( * com.service.*.*(..))" advice-ref="weshareTxAdvice" />
	</aop:config>
     
</beans>